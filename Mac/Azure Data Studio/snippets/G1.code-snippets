{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"newColumn": {
		"prefix": "g1NewColumn",
		"body": [
			"-- Create new column on table '${1:dbo}'.'${2:TableName}'",
			"-- named '${3:ColumnName}' of type '${4:ColumnType}'",
			"IF NOT EXISTS (",
			"    SELECT TOP 1 1",
			"    FROM sys.columns",
			"    WHERE [name] = '$3'",
			"        AND object_id = OBJECT_ID('$1.$2')",
			")",
			"BEGIN",
			"    ALTER TABLE [$1].[$2]",
			"    ADD [$3] $4;",
			"END",
			"GO"
		],
		"description": "Create new column on existing table."
	},

	"newColumnWithDefault": {
		"prefix": "g1NewColumnWithDefault",
		"body": [
			"-- Create new column on table '${1:dbo}'.'${2:TableName}'",
			"-- named '${3:ColumnName}' of type '${4:ColumnType}' with default value '${5:DefaultValue}'",
			"",
			"IF NOT EXISTS (",
			"    SELECT TOP 1 1",
			"    FROM sys.columns",
			"    WHERE [name] = '$3'",
			"        AND object_id = OBJECT_ID('$1.$2')",
			")",
			"BEGIN",
			"    ALTER TABLE [$1].[$2]",
			"    ADD [$3] $4 CONSTRAINT [DF_$2_$3] default($5);",
			"END",
			"GO"
		],
		"description": "Create new column on existing table."
	},

	"Create Table snippet": {
		"prefix": "g1NewTable",
		"body": [
			"-- Create a new table called '${1:TableName}' in schema '${2:SchemaName}'",
			"-- Drop the table if it already exists",
			"IF OBJECT_ID('$2.$1', 'U') IS NOT NULL",
			"    DROP TABLE $2.$1",
			"GO",
			"",
			"-- Create the table in the specified schema",
			"CREATE TABLE $2.$1",
			"(",
			"   $1Id INT NOT NULL PRIMARY KEY, -- primary key column",
			"   Column1 [NVARCHAR](50) NOT NULL,",
			"   Column2 [NVARCHAR](50) NOT NULL",
			"   -- specify more columns here",
			");",
			"GO"
		],
		"description": "User-defined snippet example 2"
	},

	"dropColumn": {
        "prefix": "g1DropColumn",
        "body": [
            "-- Drop an existing column on table '${1:dbo}'.'${2:TableName}'",
            "-- named '${3:ColumnName}'",
            "",
            "IF EXISTS (",
            "    SELECT TOP 1 1",
            "    FROM sys.columns",
            "    WHERE [name] = '$3'",
            "        AND object_id = OBJECT_ID('$1.$2')",
            ")",
            "BEGIN",
            "    ALTER TABLE [$1].[$2]",
            "    DROP COLUMN [$3];",
            "END",
            "GO"
        ],
        "description": "Create new column on existing table with a default value."
    },

    "dropColumnWithDefault": {
        "prefix": "g1DropColumnWithDefault",
        "body": [
            "-- Drop an existing column on table '${1:dbo}'.'${2:TableName}'",
            "-- named '${3:ColumnName}'",
            "",
            "IF EXISTS (",
            "    SELECT TOP 1 1",
            "    FROM sys.default_constraints",
            "    WHERE [name] = 'DF_$2_$3'",
            ")",
            "BEGIN",
            "    ALTER TABLE [$1].[$2]",
            "    DROP CONSTRAINT [DF_$2_$3];",
            "END",
            "",
            "IF EXISTS (",
            "    SELECT TOP 1 1",
            "    FROM sys.columns",
            "    WHERE [name] = '$3'",
            "        AND object_id = OBJECT_ID('$1.$2')",
            ")",
            "BEGIN",
            "    ALTER TABLE [$1].[$2]",
            "    DROP COLUMN [$3];",
            "END",
            "GO"
        ],
        "description": "Create new column on existing table with a default value."
	},

	"applyScript": {
		"prefix": "g1ApplyScript",
		"body": [
			"--##########################################################################",
			"-- GN1-${1:TicketNumber}.${2:ScriptPosition}.${3:ScriptTitle}.Apply.sql",
			"-- Apply",
			"-- ${4:Description}",
			"-- ##########################################################################",
			"",
			"USE GolfNowOne",
			"GO",
			";"
		]
	},

	"rollbackScript": {
		"prefix": "g1RollbackScript",
		"body": [
			"--##########################################################################",
			"-- GN1-${1:TicketNumber}.${2:ScriptPosition}.${3:ScriptTitle}.Rollback.sql",
			"-- Rollback",
			"-- ${4:Description}",
			"-- ##########################################################################",
			"",
			"USE GolfNowOne",
			"GO",
			";"
		]
	},

	"myCustomers": {
		"prefix": "g1MyCustomers",
		"body": [
			"USE GolfNowOne",
			"GO",
			";",
			"",
			"SELECT",
			"    C.FirstName",
			"    ,C.LastName",
			"    ,C.Email",
			"    ,C.GUID",
			"    ,C.DateLastModified",
			"    ,S.ID AS [LocationID]",
			"    ,S.Name AS [Location]",
			"    ,B.ID AS [BrandID]",
			"    ,B.Name AS [Brand]",
			"FROM Customer AS C",
			"INNER JOIN Spa AS S ON C.SpaID = S.ID",
			"LEFT JOIN Brand AS B ON S.BrandID = B.ID",
			"WHERE C.FirstName NOT LIKE 'First%' AND C.LastName NOT LIKE 'Last%'"
		]
	},

	"verinfo": {
		"prefix": "g1verinfo",
		"body": [
			"USE GolfNowOne",
			"GO",
			";",
			"",
			"SELECT",
			"*",
			"FROM [dbo].[dbverinfo]",
			"ORDER BY EventDate DESC"
		]
	},

	"insertStoredProc": {
		"prefix": "g1StoredProcedure_Insert",
		"body": [
			"-- Create/update insert stored procedure for table [${1:dbo}].[${2:TableName}]",
			"IF (OBJECT_ID('$1.sp$2_Insert') IS NOT NULL)",
			"BEGIN",
			"    DROP PROCEDURE [$1].[sp$2_Insert];",
			"END",
			"GO",
			"",
			"CREATE PROCEDURE [$1].[sp$2_Insert] (",
			"    -- Insert values go here",
			")",
			"AS",
			"BEGIN",
			"    SET NOCOUNT ON;",
			"",
			"    DECLARE @Result TABLE ([ID] int);",
			"",
			"    INSERT INTO [$1].[$2] (",
			"    -- Colums go here",
			"    )",
			"    OUTPUT INSERTED.[ID] INTO @Result ([ID])",
			"    VALUES (",
			"    -- Values go here",
			"    );",
			"",
			"    SELECT [ID] FROM @Result;",
			"END",
			"GO"
		]
	},

	"selectStoredProcedure": {
		"prefix": "g1StoredProcedure_Select",
		"body": [
			"-- Create/update select stored procedure for table [${1:dbo}].[${2:TableName}]",
			"IF (OBJECT_ID('$1.sp$2_Select') IS NOT NULL)",
			"BEGIN",
			"    DROP PROCEDURE [$1].[sp$2_Select];",
			"END",
			"GO",
			"",
			"CREATE PROCEDURE [$1].[sp$2_Select] (",
			"    @ID int = NULL",
			"    -- Other select params here",
			"",
			"    ,@PageSize int = NULL",
			"    ,@PageNumber int = NULL",
			"",
			"    ,@TotalRecordCount int = NULL output",
			")",
			"AS",
			"BEGIN",
			"    SET NOCOUNT ON",
			"",
			"    -- **********************************************************",
			"    --  Sanity checking for input parameters",
			"    -- **********************************************************",
			"",
			"    DECLARE @err_message nvarchar(255)",
			"",
			"    -- Don't allow PageSize without PageNumber",
			"    IF ((@PageSize IS NOT NULL) AND (@PageNumber IS NULL))",
			"    BEGIN",
			"        SET @err_message = 'PageSize cannot be used without specifying a PageNumber.';",
			"        THROW 51000, @err_message, 1;",
			"    END",
			"",
			"    -- Don't allow PageNumber without PageSize",
			"    IF ((@PageNumber is not null) and (@PageSize is null))",
			"    BEGIN",
			"        SET @err_message = 'PageNumber cannot be used without specifying a PageSize.';",
			"        THROW 51001, @err_message, 1;",
			"    END",
			"",
			"    -- **********************************************************",
			"    --  Create temp table for the results",
			"    -- **********************************************************",
			"",
			"    DECLARE @Results TABLE (",
			"        [ID] int NOT NULL",
			"        -- Match columns to table",
			"    );",
			"",
			"    -- **********************************************************",
			"    --  Perform actual search",
			"    -- **********************************************************",
			"",
			"    INSERT INTO @Results (",
			"        [ID]",
			"        -- Other columns here",
			"    )",
			"    SELECT",
			"        src.[ID]",
			"        -- TODO: Other columns here",
			"    FROM",
			"        [$1].[$2] src",
			"    WHERE",
			"        ((src.[ID] = @ID) OR (@ID IS NULL))",
			"        -- TODO: Other where clause filtering",
			"",
			"    -- **********************************************************",
			"    --  Output the number of results in the total set",
			"    -- **********************************************************",
			"    SELECT @TotalRecordCount = COUNT(1)",
			"    FROM @Results;",
			"",
			"    -- **********************************************************",
			"    --  Handle paging (if necessary) and return result",
			"    -- **********************************************************",
			"    IF ((@PageSize IS NOT NULL) AND (@PageNumber IS NOT NULL))",
			"        BEGIN",
			"            -- Only select the page that was requested",
			"            DECLARE @Offset INT = @PageSize * @PageNumber;",
			"",
			"            SELECT",
			"                *",
			"            FROM",
			"                @Results",
			"            ORDER BY",
			"                [ID] ASC",
			"            OFFSET @Offset ROWS",
			"            FETCH NEXT @PageSize ROWS ONLY;",
			"        END",
			"    ELSE",
			"        BEGIN",
			"            -- Return all results",
			"            SELECT * FROM @Results;",
			"        END",
			"END",
			"GO"

		]
	},

	"updateStoredProcedure": {
		"prefix": "g1StoredProcedure_Update",
		"body": [
			"-- Create/update a stored procedure to update [${1:dbo}].[${2:table}]",
			"IF (OBJECT_ID('$1.sp$2_Update') IS NOT NULL)",
			"BEGIN",
			"    DROP PROCEDURE [$1].[sp$2_Update];",
			"END",
			"GO",
			"",
			"CREATE PROCEDURE [$1].[sp$2_Update] (",
			"    @ID int = NULL",
			"    -- Other updateable fields here",
			")",
			"",
			"AS",
			"BEGIN",
			"    SET NOCOUNT ON;",
			"",
			"    -- **********************************************************",
			"    --  Sanity checking for input parameters",
			"    -- **********************************************************",
			"    DECLARE @err_message nvarchar(255)",
			"",
			"    IF (@ID IS NULL)",
			"    BEGIN",
			"        SET @err_message = 'Must specify an ID to update';",
			"        THROW 51000, @err_message, 1;",
			"    END",
			"",
			"    -- **********************************************************",
			"    --  Perform the update",
			"    -- **********************************************************",
			"    UPDATE",
			"        [$1].[$2]",
			"    SET",
			"        -- TODO: Update params here",
			"    WHERE",
			"        [ID] = @ID;",
			"END",
			"GO"
		]
	},

	"deleteStoredProcedure": {
		"prefix": "g1StoredProcedure_Delete",
		"body": [
			"-- Create/update a stored procedure to delete records from [${1:dbo}].[${2:table}]",
			"IF (OBJECT_ID('$1.sp$2_Delete') IS NOT NULL)",
			"BEGIN",
			"    DROP PROCEDURE [$1].[sp$2_Delete];",
			"END",
			"GO",
			"",
			"CREATE PROCEDURE [$1].[sp$2_Delete] (",
			"    @ID int = NULL",
			")",
			"AS",
			"BEGIN",
			"",
			"    SET NOCOUNT ON;",
			"",
			"    DECLARE @err_message nvarchar(255);",
			"",
			"    IF (@ID IS NULL)",
			"    BEGIN",
			"       SET @err_message = 'Must specify a $2 ID to delete.';",
			"        THROW 51000, @err_message, 1;",
			"    END",
			"",
			"    DELETE FROM",
			"        [$1].[$2]",
			"    WHERE",
			"        [ID] = @ID;",
			"END",
			"GO"
		]
	},

	"liveLocations": {
        "prefix": "g1LiveLocations",
        "body": [
            "SELECT",
            "    *",
            "FROM [dbo].[Spa] spa",
            "    JOIN [dbo].[BusinessType] bt",
            "        ON (bt.[ID] = spa.[BusinessTypeID])",
            "    JOIN [dbo].[BusinessConfiguration] bc",
            "        ON (bc.[ID] = bt.[BusinessConfigurationID])",
            "WHERE",
            "    (bt.[ID] = 45)",
            "    AND (bc.[ID] = 2)",
            "    AND (spa.[StatusID] = 4)",
            "    AND (spa.[IsDeleted] = 0)",
            "    AND (spa.[IsTestAccount] = 0)",
            ";"
        ]
	},

	"view": {
		"prefix": "g1View",
		"body": [
			"USE [GolfNowOne];",
			"GO",
			"",
			"---------------------------------------------------------------------------------------",
			"-- Create or update view [${1:dbo}].[${2:view}] of table [${3:dbo}].[${4:table}]",
			"---------------------------------------------------------------------------------------",
			"IF (OBJECT_ID('$1.$2', 'V') IS NULL)",
			"BEGIN",
			"    EXEC('CREATE VIEW [$1].[$2] AS SELECT 1 as t');",
			"END",
			"GO",
			"",
			"ALTER VIEW [$1].[$2] AS",
			"SELECT",
			"    -- Columns here...",
			"FROM [$3].[$4] x;",
			"GO"
		]
	}
}